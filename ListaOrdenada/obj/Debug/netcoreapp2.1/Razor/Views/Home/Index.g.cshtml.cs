#pragma checksum "C:\Users\natha\Downloads\ListaOrdenada\ListaOrdenada\ListaOrdenada\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "9d0c17579ed23917e9f9baf234453e778f44180a"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Index.cshtml", typeof(AspNetCore.Views_Home_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\natha\Downloads\ListaOrdenada\ListaOrdenada\ListaOrdenada\Views\_ViewImports.cshtml"
using ListaOrdenada;

#line default
#line hidden
#line 2 "C:\Users\natha\Downloads\ListaOrdenada\ListaOrdenada\ListaOrdenada\Views\_ViewImports.cshtml"
using ListaOrdenada.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9d0c17579ed23917e9f9baf234453e778f44180a", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"8000820ffc6b0dd716344a4ecff87c7654d78d1a", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 1550, true);
            WriteLiteral(@"<script>
    function valida(obj, e )
    {
        var tecla = ( window.event ) ? e.keyCode : e.which;
        if ( tecla == 8 || tecla == 0 )
            return true;
        if ( tecla != 44 && tecla < 48 || tecla > 57 )
            return false;
    }

    function enviaLista() {
        var numeros = $(""#numeros"").val();
        var tamanhoNumeros = numeros.length; // this will be 16
        var ultimoCaracter = numeros.charAt(tamanhoNumeros - 1);

        if (tamanhoNumeros > 0) {
            if (ultimoCaracter != "","" &&  numeros.charAt(0) != "","") {
                $.ajax({
                    type: ""POST"",
                    url: '/Home/TrataLista',
                    data: {
                        numeros: numeros
                    },
                    success: function (data) {
                        data = JSON.stringify(data);
                        $(""#result"").html(""<h3>Resultado dos números ordenados:<h3>"" + data);
                    },
                    er");
            WriteLiteral(@"ror: function (error) {

                        alert('Error: ' + JSON.stringify(error));
                    }
                });
            }
            else {
                $(""#result"").html('<h5 class=""text-danger"">Poxa... Ocorreu um erro. Verifique se os valores digitados estão corretos!</h5>');
            }
        }

        else {
            $(""#result"").html('<h5 class=""text-danger"">Poxa... Ocorreu um erro. Verifique se todos os campos foram digitados!</h5>');
        }
    }
</script>

");
            EndContext();
#line 45 "C:\Users\natha\Downloads\ListaOrdenada\ListaOrdenada\ListaOrdenada\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Lista";

#line default
#line hidden
            BeginContext(1591, 1797, true);
            WriteLiteral(@"


<div class=""row"">
    <div class=""col-lg-12"">
        <h2>Olá, seja bem-vindo!</h2>
        <div>Este projeto tem como objetivo ordenar uma lista de números.</div>
        <div>
            <h4>Desafio proposto:</h4>
            <ul class=""list-group"">
                <li class=""list-group-item"">Valendo 8 pontos: Ordene os numeros sem usar Linq ou Generics.</li>
                <li class=""list-group-item"">Valendo 2 pontos: Chame o metodo comparar(int a, int b) no seu codigo.</li>
                <li class=""list-group-item"">Nao use metodos como Sort(), OrderBy(), OrderByDescending(), entre outros, pois queremos analisar a sua logica para resolver o problema de ordenacao.</li>
            </ul>
        </div>
        <div class=""col-lg-12"">
            <div class=""col-sm-6 text-center"">
                <a href=""https://repl.it/repls/IdealElderlySnake"" target=""_blank"" class=""btn btn-link"">Visualizar Desafio Proposto ></a>
            </div>
            <div class=""col-sm-6 text-center    "">");
            WriteLiteral(@"
                <a href=""https://github.com/nathaliaspinula/ListaOrdenada"" target=""_blank"" class=""btn btn-link"">Visualizar Projeto (GitHub) > </a>
            </div>
        </div>
    </div>
    <div class=""col-lg-12 text-center"">
        <h3 style=""font-weight: bold;"">Digite os números desejados e separe-os por vírgulas:</h3>
        <div class=""form-group col-lg-10"">
            <input type=""text"" class=""form-control"" id=""numeros"" onkeypress=""return valida(this, event);"" required placeholder=""Exemplo: 1,2,3..."">
        </div>
        <div class=""col-lg-2"">
            <button class=""btn btn-primary"" type=""submit"" value=""Submit"" onclick=""enviaLista();"">Ordenar</button>
        </div>
    </div>
</div>
<div id=""result"" class=""text-center""></div>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
